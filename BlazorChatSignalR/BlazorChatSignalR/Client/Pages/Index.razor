@page "/"
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat </PageTitle>
<h3>Chats </h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind=username class="form-control" placeholder="whats your name ">
        <button class="btn btn-primary" @onclick=Connect>
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width:100%; height:500px;" @ref="TextAreaRef">
        @messages
    </textarea>
    <div class="input-group">
        <input type="text" class="form-control" @bind-value="message" placeholder="Message"
        @bind-value:event="oninput"
    >
        <br>
        <br>
        <input type="text" class="form-control" @bind-value="touser" placeholder="to user"
        @bind-value:event="oninput"
      >
        <button class="btn btn-primary" @onclick="Send" 
       > Send</button>
        <br>
        <button class="btn btn-primary" @onclick="SendToPrivate">
            SendPrivate
        </button>
     
       <br>

    </div>
}
@code{
    private HubConnection? hubConnection;
    private string messages = string.Empty;

    private string username = string.Empty;
    private string touser = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(navigationManager.ToAbsoluteUri($"/chathub?username={username}"))
        .Build();

        hubConnection.On<string, string>("GetMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + " :")}{message}";
            messages += msg + " \n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        hubConnection.On<string, string>("GetMessagetouser", (user, message) =>
       {
           var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + " :")}{message}";
           messages += msg + " \n";
           JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
           StateHasChanged();
       });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection !=null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    private async Task SendToPrivate()
    {
        if (hubConnection !=null)
        {
            await hubConnection.SendAsync("AddMessageToPrivateChat", username, touser, message);
            message = string.Empty;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection!=null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
}
